name: Build and deploy as service container

on:
  push:
    branches:
      - main 
     
  pull_request:
      types: [opened, synchronize, reopened]
 
jobs:
  webapp-build:
    runs-on: ubuntu-latest
     
    steps:  
    - name: Code checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
#     - name: SonarQube Scan
#       uses: sonarsource/sonarqube-scan-action@master
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         SONAR_HOST_URL: "https://sonarqube.astrazeneca.com"
        
#     - name: Sleep for 300 seconds 
#       run: |
#          sleep 300s
        
#     - name: SonarQube Quality Gate check
#       id: sonarqube-quality-gate-check
#       uses: sonarsource/sonarqube-quality-gate-action@master
#       # Force to fail step after specific time.
#       timeout-minutes: 25
#       env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Build WAR with Maven
      shell: bash
      run: |
        mvn clean package
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker-Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
                       
    - name: Build and push docker image
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mywebapp:${{ github.sha }}
          

  webapp-deploy:
    needs: webapp-build
    runs-on: ubuntu-latest  
    services:
      my-tomcat:
        image: ${{ secrets.DOCKER_HUB_USERNAME }}/mywebapp:${{ github.sha }}
        ports:
          - 8081:8080
    steps:
      - name: access the web-app
        run: |
          sleep 200
          curl http://127.0.0.1:8081/demo/
          
 
 
#   webapp-deploy:
#     needs: webapp-build
#     runs-on: ubuntu-latest            
#     container:
#       image: mithuna/mywebapp
#       ports: 
#         - 8081:8080
#     steps:
#       - name: Run the docker container and Access the web-app
#         run: | 
#           sleep 200
#           curl http://127.0.0.1:8080/demo/  

 
#   webapp-deploy:
#     permissions:
#       contents: none
#     runs-on: ubuntu-latest
#     needs: webapp-build
#     environment:
#       name: 'Development'
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

#     steps:
#       - name: Deploy to Azure Web App
#         id: deploy-to-webapp
#         uses: azure/webapps-deploy@v2
#         with:
#           app-name: ${{ env.AZURE_WEBAPP_NAME }}
#           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
#           images: '${{ secrets.DOCKER_HUB_USERNAME }}/mywebapp:latest'
          

        
        
    
  
          
      
        
